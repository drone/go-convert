// Code generated by scripts/generate.js; DO NOT EDIT.

// Copyright 2022 Harness, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package yaml

type Stage struct {
	Approval    *StageApproval         `json:"approval,omitempty" yaml:"approval,omitempty"`
	Cache       *Cache                 `json:"cache,omitempty" yaml:"cache,omitempty"`
	Clone       *Clone                 `json:"clone,omitempty" yaml:"clone,omitempty"`
	Concurrency *Concurrency           `json:"concurrency,omitempty" yaml:"concurrency,omitempty"`
	Delegate    *Delegate                 `json:"delegate,omitempty" yaml:"delegate,omitempty"`
	Env         map[string]string      `json:"env,omitempty" yaml:"env,omitempty"`
	Environment *EnvironmentRef        `json:"environment,omitempty" yaml:"environment,omitempty"`
	Group       *StageGroup            `json:"group,omitempty" yaml:"group,omitempty"`
	Id          string                 `json:"id,omitempty" yaml:"id,omitempty"`
	If          string                 `json:"if,omitempty" yaml:"if,omitempty"`
	Inputs      map[string]*Input      `json:"inputs,omitempty" yaml:"inputs,omitempty"`
	Name        string                 `json:"name,omitempty" yaml:"name,omitempty"`
	Needs       Stringorslice          `json:"needs,omitempty" yaml:"needs,omitempty"`
	OnFailure   []*FailureStrategy       `json:"on-failure,omitempty" yaml:"on-failure,omitempty"`
	Outputs     map[string]interface{} `json:"outputs,omitempty" yaml:"outputs,omitempty"`
	Parallel    *StageGroup            `json:"parallel,omitempty" yaml:"parallel,omitempty"`
	Permissions *Permissions           `json:"permissions,omitempty" yaml:"permissions,omitempty"`
	Platform    *Platform              `json:"platform,omitempty" yaml:"platform,omitempty"`
	Rollback    []*Step                  `json:"rollback,omitempty" yaml:"rollback,omitempty"`
	RunsOn      string                 `json:"runs-on,omitempty" yaml:"runs-on,omitempty"`
	Runtime     *Runtime               `json:"runtime,omitempty" yaml:"runtime,omitempty"`
	Service     *ServiceRef            `json:"service,omitempty" yaml:"service,omitempty"`
	Services    map[string]*Container  `json:"services,omitempty" yaml:"services,omitempty"`
	Status      *Status                `json:"status,omitempty" yaml:"status,omitempty"`
	Steps       []*Step                `json:"steps,omitempty" yaml:"steps"`
	Strategy    *Strategy              `json:"strategy,omitempty" yaml:"strategy,omitempty"`
	Template    *StageTemplate         `json:"template,omitempty" yaml:"template,omitempty"`
	Volumes     []*Volume              `json:"volumes,omitempty" yaml:"volumes,omitempty"`
	Workspace   *Workspace             `json:"workspace,omitempty" yaml:"workspace,omitempty"`

	// Context temporarily stores information from the
	// matrix and template expansion. Context is not part of
	// the yaml schema.
	Context *Context `json:"context,omitempty" yaml:"context,omitempty"`
}
