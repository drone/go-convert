pipeline {
    agent any

    tools {
        ant 'AntNew'
        gradle 'GradleNew'
        maven 'M3'
    }

    environment {
        DOCKER_IMAGE = 'user1/testimage'
        DOCKER_TAG = 'latest'
        ARTIFACTORY_SERVER = 'artifactory-id'
    }

    stages {
        stage('Plugin Build') {
            steps {
                script {
                    // Perform the checkout
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/harness-community/test-jenkins-to-harness.git']]
                    ])
                    // Use Maven to build
                    withMaven {
                    sh "mvn clean install\
                        package"
                    }
                    // Use Ant to build
                    withAnt {
                        sh 'ant build'
                    }

                    // Use Gradle to build
                    withGradle {
                        sh 'gradle build'
                    }
                }
            }
        }

        stage('ReadWriteFile') {
            steps {
                script {
                    writeFile file: 'output1.txt', text: '''line1

line2

line3'''
                    readFile file: 'output1.txt'
                }
            }
        }

        stage('DeleteDirStep') {
            steps {
                script {
                    // Create files in target directory
                    sh '''
                      mkdir -p target
                      touch target/file4.txt
                      touch target/file5.txt
                      touch target/file6.txt
                    '''

                    // List files before deletion
                    sh 'ls'

                    // Delete the target directory
                    dir('target') {
                        deleteDir()
                    }

                    // List files after deletion
                    sh 'ls'
                }
            }
        }
        stage('Read json step') {
            steps {
                script {
                    def oldJson = '''{
            "branch":{
                "type-0.2":{"version":"0.2","rc":"1","rel":"1","extras":"1"},
                "type-0.3":{"version":"0.3","rc":"1","rel":"1","extras":"1"}
                }
            }'''
                    def props = readJSON text: oldJson
                    def keyList = props['branch'].keySet()
                    echo "${keyList}"
                }
            }
        }

        stage('Read yaml step') {
            steps {
                script {
                    writeFile file: 'test1.yaml', text: '''pipeline:
  identifier: default
  name: default
  orgIdentifier: default
  projectIdentifier: default
  properties:
    ci:
      codebase:false'''

                    datas = readYaml (file: 'test1.yaml')
                }
            }
        }
    
        stage('Code Analysis') {
            environment {
                scannerHome = tool 'Sonar'
            }
            steps {
                script {
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=Jenkins-Sonar \
                            -Dsonar.projectName=Jenkins-Sonar "
                    }
                }
            }
        }
        // SETTINGS DO NOT MATCH CORRECTLY TO IMPLEMENT.
        stage('Blackduck') {
            steps {
                synopsys_detect "--blackduck.url=https://harness.app.blackduck.com/ --blackduck.api.token=<BLACKDUCK_TOKEN> --detect.project.name=jenkinstestFinal --detect.project.version.name=v1.0"
            }
        }

        stage('Find Files') {
            steps {
                script {
                    def files = findFiles(glob: '**/*.txt')
                    echo "${files.length} files"

                    for(int i = 0; i < files.length; i++) {
                        echo "${files[i].name} -- ${files[i].path}"
                    }
                }
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    def server = Artifactory.server ARTIFACTORY_SERVER

                    def dockerPush = server.docker.push(
                        "${DOCKER_IMAGE}:${DOCKER_TAG}",
                        'testimage'
                    )

                    dockerPush.execute()
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building the application...'
            }
            post {
                always {
                    // Send build info to Jira, associating it with the SCRUM-1 issue
                    jiraSendBuildInfo site: 'fossops.atlassian.net', branch: 'main'
                }
            }
        }
        // Deployment Stage: Staging
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to Staging...'
            }
            post {
                always {
                    // Send deployment info for the Staging environment
                    jiraSendDeploymentInfo(
                        environmentId: 'stg-env-1',
                        environmentName: 'staging',
                        environmentType: 'staging',
                        issueKeys: ['SCRUM-1','SCRUM-2','SCRUM-3'],
                        state: 'successful'
                    )
                }
            }
        }
        // Deployment Stage: Production
        stage('Deploy to Production') {
            steps {
                echo 'Deploying to Production...'
            }
            post {
                always {
                    // Send deployment info for the Production environment
                    jiraSendDeploymentInfo(
                        environmentId: 'prod-env-1',
                        environmentName: 'production',
                        environmentType: 'production',
                        issueKeys: ['SCRUM-1','SCRUM-2','SCRUM-3'],
                        state: 'successful'
                    )
                }
            }
        }
        stage('Prepare Workspace') {
            steps {
                script {
                    // Create source and destination directories if they don't exist
                    bat 'if not exist src mkdir src'
                    bat 'if not exist dest mkdir dest'
                }
            }
        }
        stage('Create Files') {
            steps {
                script {
                    // Create sample .txt files in the src directory
                    bat 'echo Sample text 1 > src\\sample1.txt'
                    bat 'echo Sample text 2 > src\\sample2.txt'
                }
            }
        }
        stage('Copy Files') {
            steps {
                fileOperations([
                    fileCopyOperation(
                        includes: 'src/*.txt',  // Correct parameter for source files
                        excludes: '',           // No files to exclude
                        targetLocation: 'dest/',// Destination directory
                        flattenFiles: false,    // Keep directory structure
                        renameFiles: false,     // Do not rename files
                        sourceCaptureExpression: '', // No regex capture
                        targetNameExpression: '',    // No renaming pattern
                        useDefaultExcludes: true // Use default exclusion patterns
                    )
                ])
            }
        }
        stage('Create File') {
            steps {
                fileOperations([
                    fileCreateOperation(fileName: 'newfile.txt', fileContent: 'Hello, World!')
                ])
            }
        }
        stage('Create Files') {
            steps {
                script {
                    // Create a directory and files to be deleted later
                    bat '''
                    mkdir old-files
                    echo. > old-files\\file1.log
                    echo. > old-files\\file2.log
                    echo. > old-files\\file3.txt
                    '''
                }
            }
        }
        stage('Delete Files') {
            steps {
                fileOperations([
                    fileDeleteOperation(includes: '**/old-files/*.log', excludes: '')
                ])
            }
        }
        stage('Prepare Directory') {
            steps {
                sh 'mkdir -p downloads' // Ensure the downloads directory exists
            }
        }
        stage('Download File') {
            steps {
                fileOperations([
                    fileDownloadOperation(
                        url: 'https://github.com/git/git/archive/refs/heads/master.zip',
                        targetLocation: 'downloads/',
                        targetFileName: 'git-master.zip',
                        userName: '', // Explicitly setting to an empty string
                        password: ''  // Explicitly setting to an empty string
                    )
                ])
            }
        }
        stage('Prepare Files') {
            steps {
                script {
                    // Create source files for the join operation
                    sh '''
                    echo "Content of File 1" > file1.txt
                    echo "Content of File 2" > file2.txt
                    '''
                }
            }
        }
        stage('Join Files') {
            steps {
                fileOperations([
                    fileJoinOperation(
                        sourceFile: 'file1.txt',
                        targetFile: 'file2.txt'
                    )
                ])
            }
        }
        stage('Prepare Files') {
            steps {
                script {
                    // Create source files for the join operation
                    sh '''
                    echo "Content of File 1" > file1.txt
                    echo "Content of File 2" > file2.txt
                    '''
                }
            }
        }
        stage('Join Files') {
            steps {
                fileOperations([
                    fileJoinOperation(
                        sourceFile: 'file1.txt',
                        targetFile: 'file2.txt'
                    )
                ])
            }
        }
        stage('Create File') {
            steps {
                script {
                    // Create a sample file in the current workspace
                    sh '''
                    echo "This is a sample file" > newfile.txt
                    '''
                }
            }
        }
        stage('Rename File') {
            steps {
                fileOperations([
                    fileRenameOperation(
                        source: 'newfile.txt',
                        destination: 'renamedfile.txt'
                    )
                ])
            }
        }
        stage('Create Files') {
            steps {
                script {
                    // Create some sample files in the workspace
                    sh '''
                    echo "Content of newfile1" > newfile1.txt
                    echo "Content of newfile2" > newfile2.txt
                    '''
                }
            }
        }
        stage('Transform Files') {
            steps {
                fileOperations([
                    fileTransformOperation(
                        includes: 'newfile*.txt',
                        excludes: 'newfile2.txt',
                        useDefaultExcludes: false
                    )
                ])
            }
        }
        stage('Create TAR File') {
            steps {
                script {
                    // Create a sample tar file for the untar operation
                    sh '''
                    mkdir -p src
                    echo "Sample content" > src/file1.txt
                    echo "Another sample content" > src/file2.txt
                    tar -czf src.tar.gz src
                    '''
                }
            }
        }
        stage('UnTar File') {
            steps {
                fileOperations([
                    fileUnTarOperation(
                        filePath: 'src.tar.gz',
                        targetLocation: 'dest/',
                        isGZIP: true
                    )
                ])
            }
        }
        stage('Create ZIP File') {
            steps {
                script {
                    // Create a sample zip file for the unzip operation
                    sh '''
                    mkdir -p src
                    echo "Sample content" > src/file1.txt
                    echo "Another sample content" > src/file2.txt
                    zip -r src.zip src
                    '''
                }
            }
        }
        stage('UnZip File') {
            steps {
                fileOperations([
                    fileUnZipOperation(
                        filePath: 'src.zip',
                        targetLocation: 'dest/'
                    )
                ])
            }
        }
        stage('Create Source Folder') {
            steps {
                script {
                    // Create a sample folder with files to zip
                    sh '''
                    mkdir -p src
                    echo "Sample content" > src/file1.txt
                    echo "Another sample content" > src/file2.txt
                    '''
                }
            }
        }
        stage('Zip Folder') {
            steps {
                fileOperations([
                    fileZipOperation(
                        folderPath: 'src/',
                        outputFolderPath: 'dest/'
                    )
                ])
            }
        }
        stage('Create Source Folder and Files') {
            steps {
                script {
                    // Create a source folder with some sample files
                    sh '''
                    mkdir -p src
                    echo "File 1 content" > src/file1.txt
                    echo "File 2 content" > src/file2.txt
                    '''
                }
            }
        }
        stage('Copy Folder') {
            steps {
                fileOperations([
                    folderCopyOperation(
                        sourceFolderPath: 'src/',
                        destinationFolderPath: 'dest'
                    )
                ])
            }
        }
        stage('File') {
            steps {
                fileOperations([
                    folderCreateOperation(folderPath: 'src/create')
                ])
            }
        }
        stage('File') {
            steps {
                fileOperations([
                    folderDeleteOperation(folderPath: 'src/create')
                ])
            }
        }
        stage('Create Source Folder') {
            steps {
                script {
                    // Create a source folder with some sample files
                    sh '''
                    mkdir -p src
                    echo "Sample content" > src/file.txt
                    '''
                }
            }
        }
        stage('Rename Folder') {
            steps {
                fileOperations([
                    folderRenameOperation(
                        source: 'src/',
                        destination: 'dest/'
                    )
                ])
            }
        }

        // Downloading a sample POM file from the internet
        stage('Download Sample POM') {
            steps {
                sh '''
                    curl -o pom.xml https://raw.githubusercontent.com/spring-projects/spring-petclinic/main/pom.xml
                '''
            }
        }

        // Reading the downloaded POM file
        stage('Read Maven POM') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'

                    // Extracting the version from the POM file
                    echo "Project Version: ${pom.version}"
                }
            }
        }
        stage('Publish') {
            steps {
                s3Upload entries: [
                [bucket: 'bucket-1', excludedFile: '2.txxt'
                 , flatten: false, gzipFiles: false, keepForever: false
                 , selectedRegion: 'us-west-1', showDirectlyInBrowser: false
                 , sourceFile: '*.txt', uploadFromSlave: false],
                [bucket: 'bucket-1'
                 , flatten: false, gzipFiles: true, keepForever: false
                 , selectedRegion: 'us-west-1', showDirectlyInBrowser: false
                 , sourceFile: '*.md', uploadFromSlave: false]
                ], profileName: 'default'
            }
        }
        stage('Jacoco reports') {
            steps {
                jacoco(
                        classPattern: '**/target/classes, **/WEB-INF/classes',
                        exclusionPattern: '**/controllers/*.class',
                        inclusionPattern: '**/*.class',
                        sourceInclusionPattern: '**/*.java',
                        sourceExclusionPattern: '**/controllers/*.java',
                        maximumBranchCoverage: '81',
                        maximumClassCoverage: '85',
                        maximumComplexityCoverage: '10',
                        maximumInstructionCoverage: '80',
                        maximumLineCoverage: '83',
                        maximumMethodCoverage: '84'
                )
            }
        }
        //Allure Jenkins pipeline stages
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/eroshenkoam/allure-example.git'
            }
        }
        stage('Build') {
            steps {
                sh './gradlew clean test'
            }
        }
        stage('Report') {
            steps {
                allure([
                    includeProperties: false,
                    jdk: '',
                    properties: [],
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'build/allure-results']]
                ])
            }
        }
        stage('Run NUnit') {
            steps {
                script {
                     xmlFileUrl = 'https://raw.githubusercontent.com/harness-community/test-jenkins-to-harness/refs/heads/main/nunit-test-result.xml'
                     outputFilePath = 'TestResult.xml'

                    bat """
                    powershell -Command "Invoke-WebRequest -Uri '${xmlFileUrl}' -OutFile '${outputFilePath}'"
                    """
                }
                nunit testResultsPattern: 'TestResult.xml', failIfNoResults: true, skipJUnitArchiver: false, failedTestsFailBuild: true
            }
        }

        // Javadoc Steps
        stage('Checkout') {
            steps {
                git url: 'https://github.com/spring-guides/gs-rest-service.git', branch: 'main'
            }
        }
        stage('Build') {
            steps {
                sh 'cd complete && gradle clean build --info --stacktrace'
            }
        }
        stage('Generate Javadoc') {
            steps {
                sh 'cd complete && gradle javadoc --info --stacktrace'
            }
        }
        stage('Publish Javadoc') {
            steps {
                javadoc javadocDir: 'complete/build/docs/javadoc', keepAll: true
            }
        }    
        //Kube-ctl
        stage('Check Docker') {
            steps {
                sh '''
                    echo "Current PATH: $PATH"
                    which docker || echo "Docker not found"
                '''
            }
        }
        stage('Run Kubectl') {
            steps {
                withKubeConfig([
                    credentialsId: 'credentialsId', // Replace with your actual credentials ID
                    serverUrl: 'https://127.0.0.1:56227' // Replace with your actual server URL

                ]) {
                    sh 'kubectl get pods' // Run your kubectl command here
                }
            }
        }
        // Cobertura plugin stage begins
        stage('Checkout sample code for Cobertura coverage.xml file') {
            steps {
                git branch: "main", url: "https://github.com/harness-community/drone-coverage-report.git"
            }
        }
        stage('Publish Cobertura Coverage Report') {  // Cobetura plugin stage
            steps {
                cobertura coberturaReportFile: '**/coverage.xml',
                        autoUpdateHealth: false,
                        autoUpdateStability: false,
                        failUnhealthy: false,
                        failUnstable: false,
                        lineCoverageTargets: '80, 0, 0',
                        methodCoverageTargets: '80, 0, 0',
                        classCoverageTargets: '70, 0, 0',
                        conditionalCoverageTargets: '65, 0, 0'
            }
        }
        // slackFileUpload plugin stage begins here
        stage('Generate Temp File') {
            steps {
                script {
                    def words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']
                    def randomWords = (1..5).collect { words[new Random().nextInt(words.size())] }.join(' ')
                    writeFile file: 'b.txt', text: randomWords
                    echo "Temp file created with content: ${randomWords}"
                }
            }
        }
        stage('Upload to Slack') {
            steps {
                slackUploadFile(
                    channel: 'C07TL1KNV8Q',
                    credentialId: 'SlackChannelCreds',
                    failOnError: true,
                    filePath: 'b.txt',
                    initialComment: 'jenkins file upload test'
                )
            }
        }
        // slackSend plugin stage begins here
        stage('Send Slack Notification') {
            steps {
                slackSend channel: 'dev',
                          color: 'good',
                          iconEmoji: ':rocket:',
                          message: 'hi, the test msg slack now test ...',
                          teamDomain: 'jenkins-bot-testing',
                          tokenCredentialId: 'slackcreds03',
                          username: 'jenkins-test-user'
            }
        }
        //Pagerduty plugin
        post {
        success {
            echo 'Job succeeded!'
            pagerduty(
                resolve: true,
                routingKey: "${env.PAGERDUTY_ROUTING_KEY}",
                dedupKey: "${env.PAGERDUTY_DEDUP_KEY}",
                incidentSummary: "Build Succeeded for ${env.JOB_NAME}",
                incidentSeverity: "info",
                incidentSource: "${env.JOB_NAME}"
            )
        }
        failure {
            echo 'Job failed!'
            pagerduty(
                resolve: false,
                routingKey: "${env.PAGERDUTY_ROUTING_KEY}",
                dedupKey: "${env.PAGERDUTY_DEDUP_KEY}",
                incidentSummary: "Build Failed for ${env.JOB_NAME}",
                incidentSeverity: "critical",
                incidentSource: "${env.JOB_NAME}"
            )
        }
        aborted {
            echo 'Job was aborted!'
            pagerduty(
                resolve: false,
                routingKey: "${env.PAGERDUTY_ROUTING_KEY}",
                dedupKey: "${env.PAGERDUTY_DEDUP_KEY}",
                incidentSummary: "Build Aborted for ${env.JOB_NAME}",
                incidentSeverity: "warning",
                incidentSource: "${env.JOB_NAME}"
            )
        }
        unstable {
            echo 'Job is unstable!'
            pagerduty(
                resolve: false,
                routingKey: "${env.PAGERDUTY_ROUTING_KEY}",
                dedupKey: "${env.PAGERDUTY_DEDUP_KEY}",
                incidentSummary: "Build Unstable for ${env.JOB_NAME}",
                incidentSeverity: "warning",
                incidentSource: "${env.JOB_NAME}"
            )
        }
    }
    //pagerduty plugin change event
    post {
        always {
            // Create a change event in PagerDuty after the job completes, regardless of outcome
            pagerdutyChangeEvent(
                integrationKey: "${env.PAGERDUTY_INTEGRATION_KEY}",
                summaryText: "Job ${env.JOB_NAME} completed with status ${currentBuild.currentResult}",
                customDetails: [
                    buildNumber: "${env.BUILD_NUMBER}",
                    jobName: "${env.JOB_NAME}",
                    jobURL: "${env.BUILD_URL}"
                ]
            )
        }
    }
        // publishHTML plugin stage begins
        stage('Generate HTML Reports') {
            steps {
                script {
                    sh 'mkdir -p reports'
                    writeFile file: 'reports/index.html', text: '''
                        <html>
                        <head><title>Sample Report</title></head>
                        <body>
                            <h1>Main Report</h1>
                            <p>This is the main report page.</p>
                        </body>
                        </html>
                    '''
                }
            }
        }
        stage('Publish HTML Report') {
            steps {
                publishHTML(target: [
                        reportName : 'Sample HTML Report',
                        reportDir  : 'reports',
                        reportFiles: 'index.html',
                        includes   : '**/*.html,**/*.css'
                ])
            }
        }
        //mailer
        stage('Test') {
            steps {
                script {
                    // Set the build result to test email notifications
                    currentBuild.result = 'FAILED' // Change to 'UNSTABLE' or 'SUCCESS' as needed
                }
            }
        }
         post {
            always {
                mail(
                    to: "test.uyser@testmail.com",
                    subject: "Jenkins Build - ${currentBuild.fullDisplayName}",
                    body: """
                    Build Status: ${currentBuild.currentResult}
                    Check console output at: ${env.BUILD_URL}console
                    """
                )
            }
        }
        // nexusArtifactUploader plugin stage begins
        stage('Generate File') {
            steps {
                writeFile file: 'fruit_names.txt', text: 'apple\nbanana\ncherry\ndate\nelderberry\nfig\ngrape\nhoneydew\nkiwi\nlemon'
                echo "Generated file: fruit_names.txt"
            }
        }

        stage('Upload to Nexus') {
            steps {
                nexusArtifactUploader artifacts: [[
                    artifactId: 'fruit-names-v0.1',
                    file: 'fruit_names.txt',
                    type: 'txt'
                ]],
                credentialsId: 'nexus-hnstest01-creds',
                groupId: 'test01',
                nexusUrl: '4.24.1.21:9192/',
                repository: 'plg01maven2',
                version: '1.12'
            }
        }
        //Nodejs conversion Step
        stage('Install Packages') {
            steps {
                withSonarQubeEnv('SonarCloud') { // Matches the name in Jenkins configuration
                    sh "${SONAR_SCANNER}  -Dsonar.projectKey=vanisrikanithi_Test-Sonarqube" +
               '-Dsonar.organization=vanisrikanithi' +
               '-Dsonar.login=b751ddb91e11f466d7cdfa0abd65b4a6c393d938 ' +
               '-Dsonar.sources=src ' +
               '-Dsonar.java.binaries=target/classes'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()
                    // If the quality gate fails, log the status but don't abort the pipeline
                    if (qualityGate.status != 'OK' && qualityGate.status != 'NONE') {
                        echo "Quality Gate failed with status: ${qualityGate.status}. Continuing the pipeline."
            } else if (qualityGate.status == 'NONE') {
                        echo 'Quality Gate status is NONE. Check SonarQube configuration.'
            } else {
                        echo "Quality Gate passed with status: ${qualityGate.status}."
                    }
                }
            }
        }
        //Unarchive Stage
        stage('Unarchive Files') {
            steps {
                script {
                    // Directory to store unarchived files
                    def extractDir = 'unarchived_files'

                    // Ensure the directory exists
                    sh "mkdir -p ${extractDir}"

                    // Define the mapping for unarchiving files
                    def mappings = [
                        'archive.zip': "${extractDir}/zip/",
                    ]

                    // Loop through the mappings and unarchive files
                    for (archive in mappings.keySet()) {
                        def targetDir = mappings[archive]
                        echo "Unarchiving: ${archive} into ${targetDir}"
                        unarchive mapping: ["${archive}": targetDir]
                    }

                    // Verify the unarchived files
                    sh "ls -l ${extractDir}"
                }
            }
        }
        //Gatling
        stage('Checkout Code') {
            steps {
              git url: 'https://github.com/gatling/gatling-maven-plugin-demo.git', branch: 'main'

            }
        }
        stage('Run Gatling Simulation') {
            steps {
                sh 'mvn clean gatling:test'// Run the simulation using Maven
            }
        }
        stage('Publish Results') {
            steps {
                gatlingArchive() // or archiveArtifacts(artifacts: 'target/gatling/index.html')
            }
        }
        // slackUserIdFromEmail
        stage('Retrieve Slack User ID') {
            steps {
                script {
                    SLACK_USER_ID = slackUserIdFromEmail(
                        botUser: true,
                        email: 'slack_user@gmail.com',
                        tokenCredentialId: 'slack_token_01'
                    )
                    echo "Slack User ID for email slack_user@gmail.com: ${SLACK_USER_ID}"
                }
            }
        }
        stage('Use Slack User ID') {
            steps {
                echo "Perform actions using Slack User ID: ${SLACK_USER_ID}"
            }
        }
        // slackUserIdsFromCommitters
        stage('Get Slack User IDs from Committers') {
            steps {
                script {
                    def slackUserIds = slackUserIdsFromCommitters(
                            botUser: true,
                            tokenCredentialId: 'slack_creds_01'
                    )
                    echo "Slack User IDs: ${slackUserIds ?: 'No IDs found'}"
                }
            }
        }

        //Notify Endpoints
        post {
        always {
            script {
                notifyEndpoints(
                    endpoint: env.NOTIFICATION_ENDPOINT,
                  
                    notes: env.BUILD_NOTES,
                    phase: 'COMPLETED',
                    loglines: '10'
                )
            }
        }
        }
    }
}